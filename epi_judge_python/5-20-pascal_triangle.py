from typing import List

from test_framework import generic_test

"""
Compute rows in a pascal triangle
[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]
Time and Space: O(n^2)
Logic: Approach is to keep the arrays left-alighned., that is the first entry is at location 0.
Now it is simple; the jth entry in the ith row is 1 if j ==0 or j == i,otherwise it is the sum 
of j and j-1 entry in (i-1)th row (row above it).
"""
def generate_pascal_triangle(n: int) -> List[List[int]]:

    result = [[1] * (i + 1) for i in range(n)]#first create the template using 1s
    # for i in range(n):#accesses row
    #     for j in range(1, i): ##access column, and alwasy start j with one
    #         # Sets this entry to the sum of the two above adjacent entries.
    #         result[i][j] = result[i - 1][j - 1] + result[i - 1][j]
    # return result
    #or you could directly start form row 3
    for i in range(2, n):
        for j in range(1, i):#start doing from row 2
            result[i][j] = result[i-1][j-1] + result[i-1][j]
    return result



#variant
"""
Compute the nth row of pascal's triangle using O(n) space
Logic: We can observe that the Nth row of the Pascals triangle consists of following sequence:
NC0, NC1, ......, NCN - 1, NCN
Since, NC0 = 1, the following values of the sequence can be generated by the following equation:
NCr = (NCr - 1 * (N - r + 1)) / r where 1 ≤ r ≤ N

https://medium.com/@prafullcpp/nth-row-of-pascals-triangle-3f2a81abe49f
C(n, i) = n! / (i! (n-i)!) — — — — — — Equation 1
C(n, i+1) = n! / ((i+1)! (n-(i+1))! ) — — — — — — Equation 2
Dividing equation 2 by 1 will give:
C(n, i+1) / C(n, i) = i! (n-i)! / (i+1)! (n-i-1)!
Solving this we get:
C(n, i+1) = C(n, i) * (n-i) / (i+1)
Hence; C(n, i) = C(n, i-1) * (n-(i-1)) / i
"""

def nth_row_pascal_triangle(N):
    # nC0 = 1
    arr = [1]#C(N, 0)
    prev = 1
 
    for i in range(1, N + 1):#C(N,1)...C(N,N)
 
        # nCr = (nCr-1 * (n - r + 1))/r
        curr = (prev * (N - i + 1)) // i
        arr.append(curr)
        prev = curr
    return arr

nth_row_pascal_triangle(4)#n starts with zero

if __name__ == '__main__':
    exit(
        generic_test.generic_test_main('5-20-pascal_triangle.py',
                                       'pascal_triangle.tsv',
                                       generate_pascal_triangle))
